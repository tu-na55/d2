"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# simple JWT: 日付・時刻操作モジュール
from datetime import timedelta

####################
# from django.contrib.messages import constants as messages

# MESSAGE_TAGS = {
#     messages.DEBUG: "dark",
#     messages.ERROR: "danger",
# }
####################
# production
# from . import __version__

# Settings for SENTRY
# if os.getenv('SENTRY_DSN'):
#     import sentry_sdk
#     from sentry_sdk.integrations.django import DjangoIntegration

#     sentry_sdk.init(
#         dsn=os.getenv('SENTRY_DSN'),
#         integrations=[DjangoIntegration()],
#         release='DockerHubUpdateNotifier@' + __version__,
#         environment='prod',

#         # If you wish to associate users to errors (assuming you are using
#         # django.contrib.auth) you may enable sending PII data.
#         send_default_pii=True
#     )
#     sentry_sdk.capture_message('The application has been launched.')
####################


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")
# DEBUG = False

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
# ALLOWED_HOSTS = [
#     i.strip() for i in os.environ['ALLOWED_HOSTS'].split(',')
#     if not i.strip() == ''
# ] if 'ALLOWED_HOSTS' in os.environ else []


####################
# SSL
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# SECURE_SSL_REDIRECT = True

# SECURE_REFERRER_POLICY = "same-origin"

# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

# X_FRAME_OPTIONS = "DENY"

# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
####################

# Application definition

INSTALLED_APPS = [
    # 'account',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # add modules
    "rest_framework",
    "corsheaders",
    "djoser",
    # "drf_yasg",
    # 'rest_framework_gis',
    # 'django.contrib.gis',
    # add app
    # 'repos.apps.ReposConfig',
    # 'sample.apps.SampleConfig',
    # 'api.apps.ApiConfig',
    # "core",
]


MIDDLEWARE = [
    # cors: topに置く
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# MIDDLEWARE直下に追加
# すべて許可
CORS_ORIGIN_ALLOW_ALL = False
# CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8080",
    "http://localhost:8080",
]

# レスポンスを公開する
# クロスサイトHTTP要求にCookieを含めることが許可される。
# CORS_ALLOW_CREDENTIALS = True

# 認証関連
REST_FRAMEWORK = {
    ####################
    # swagger
    # use drf_yasg
    # "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny",],
    ####################
    # simple JWT
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    ####################
    # utils.py: custom_exception_handler()
    # 'EXCEPTION_HANDLER': 'd.todos.utils.custom_exception_handler'
}
# トークンの設定
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
}


ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # default, production
        # "DIRS": [],
        # development
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        # "ENGINE": "django.db.backends.sqlite3",
        # "ENGINE": ("django.db.backends." + os.getenv("DB_ENGINE", "sqlite3")),
        # "ENGINE": os.getenv("DB_ENGINE", "sqlite3"),
        "ENGINE": os.getenv("DB_ENGINE", default="django.db.backends.sqlite3"),
        # "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        # "NAME": os.getenv("DB_NAME", os.path.join(BASE_DIR, "db.sqlite3")),
        "NAME": os.getenv("DB_NAME", default=os.path.join(BASE_DIR, "db.sqlite3")),
        # "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "0")),
        "USER": os.getenv("DB_USER", ""),
        "PASSWORD": os.getenv("DB_PASS", ""),
        "HOST": os.getenv("DB_HOST", ""),
        "PORT": os.getenv("DB_PORT", ""),
        # "OPTIONS": {"init_command": "SET sql_mode='STRICT_TRANS_TABLES'",},
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
# add
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
# STATIC_ROOT = os.getenv('STATIC_ROOT', os.path.join(BASE_DIR, 'static'))

# media
# STATIC_URLの直下に追加
# 今回作成するアプリは画像を取り扱うため MEDIA_URL と MEDIA_ROOT も記述しています。
# MEDIA_URL = "/media/"
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# E-mail Settings
# https://docs.djangoproject.com/en/3.0/topics/email/

# if "EMAIL_BACKEND" in os.environ:
#     EMAIL_BACKEND = (
#         "django.core.mail.backends." + os.environ["EMAIL_BACKEND"] + ".EmailBackend"
#     )
# if "EMAIL_HOST" in os.environ:
#     EMAIL_HOST = os.environ["EMAIL_HOST"]
# if "EMAIL_PORT" in os.environ:
#     EMAIL_PORT = os.environ["EMAIL_PORT"]
# if "EMAIL_USE_SSL" in os.environ:
#     EMAIL_USE_SSL = os.environ["EMAIL_USE_SSL"].upper() == "TRUE"
# if "EMAIL_USE_TLS" in os.environ:
#     EMAIL_USE_TLS = os.environ["EMAIL_USE_TLS"].upper() == "TRUE"
# if "EMAIL_HOST_USER" in os.environ:
#     EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
# if "EMAIL_HOST_PASSWORD" in os.environ:
#     EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
# if "EMAIL_USE_LOCALTIME" in os.environ:
#     EMAIL_USE_LOCALTIME = os.environ["EMAIL_USE_LOCALTIME"].upper() == "TRUE"
# if "EMAIL_TIMEOUT" in os.environ:
#     EMAIL_TIMEOUT = os.environ["EMAIL_TIMEOUT"]
# if "DEFAULT_FROM_EMAIL" in os.environ:
#     DEFAULT_FROM_EMAIL = os.environ["DEFAULT_FROM_EMAIL"]
# if "EMAIL_SUBJECT_PREFIX" in os.environ:
#     EMAIL_SUBJECT_PREFIX = os.environ["EMAIL_SUBJECT_PREFIX"]
# if "EMAIL_SSL_KEYFILE" in os.environ:
#     EMAIL_SSL_KEYFILE = os.environ["EMAIL_SSL_KEYFILE"]
# if "EMAIL_SSL_CERTFILE" in os.environ:
#     EMAIL_SSL_CERTFILE = os.environ["EMAIL_SSL_CERTFILE"]
# if "EMAIL_FILE_PATH" in os.environ:
#     EMAIL_FILE_PATH = os.environ["EMAIL_FILE_PATH"]

# login
# AUTH_USER_MODEL = 'account.User'
# LOGIN_URL = 'admin:login'
# LOGOUT_REDIRECT_URL = '/'
