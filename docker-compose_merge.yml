version: '3'

services:
  db:
    container_name: mysql
    image: mysql:latest
    # image: mysql:8.0
    # image: mysql:5.7
    # build: .
    # build: ./mysql

    # my.confで設定しない場合
    # mysql:5.7
    # command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    # mysql:8.0
    # command: --default-authentication-plugin=mysql_native_password


    # add
    # restart: always

    ports:
      # mysql: 5.7
      # - "3306:3306"
      # mysql: 8.0
      - "13306:3306"
    # add
    expose:
      - 3306

    environment:
      MYSQL_ROOT_PASSWORD: rpass
      # sqlで作成するなら不要
      # MYSQL_USER: tusr
      # MYSQL_PASSWORD: tpass
      # MYSQL_DATABASE: sample
      # MYSQL_HOSTNAME: mysql
      TZ: 'Asia/Tokyo'

    volumes:
      ##########
      # my.cnfの変更は down して up すれば反映されます。
      # ただ、デフォルト認証プラグインや既に作成したテーブルの文字コード変更などは手動で変更が必要なものもあります。それは名前付きボリュームを削除して作り直した方が早いかもです。
      ##########
      # 初期データを投入するSQLが格納されているdir
      # *.sh / *.sql / *.sql.gzの拡張子のファイルはファイル名の昇順に実行される。
      - ./mysql/init:/docker-entrypoint-initdb.d
      # - ./db/mysql_conf:/etc/mysql/conf.d
      # - ./mysql/conf.d/custom.cnf:/etc/mysql/conf.d/custom.cnf
      # 永続化するときにマウントするdir
      # MySQLのコンテナを起動するたびに初期化処理が走るようになります。
      # - ./mysql/data:/var/lib/mysql
      - d2.db.volume:/var/lib/mysql
      # log
      - ./log/mysql:/var/log/mysql

    # 01
    #   - mysql-db:/var/lib/mysql
    #   - ./config/nginx/my.cnf:/etc/mysql/conf.d/my.cnf
    # 02
      # - mysqldata:/var/lib/mysql
    #   - ./mysql/conf.d:/etc/mysql/conf.d
    # 04
    # - mysite.db.volume:/var/lib/mysql
    # - ./sql:/docker-entrypoint-initdb.d

    # networks:
    #   - sample_network
    # 09
    # networks:
    #     - db_network
    # 12
    # networks:
    #   - sample
####################
  # 08
  # db-testing:
  #     image: mysql:8.0
  #   volumes:
  #     - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
  #   tmpfs:
  #     - /var/lib/mysql
  #     - /var/log/mysql
  #   environment:
  #     - MYSQL_DATABASE=${DB_NAME}
  #     - MYSQL_USER=${DB_USER}
  #     - MYSQL_PASSWORD=${DB_PASS}
  #     - MYSQL_ROOT_PASSWORD=${DB_PASS}
  #     - TZ=${TZ}

####################
  backend:
    container_name: django
    # build:
      # context: ./backend
      # context: ..
    build: ./backend
    # build: ./dockerfiles/django_docker
        # dockerfile: ./docker/python/Dockerfile

    # 03 add
    # tty: true

    # command: ./wait-for-it.sh db:3306 -- pipenv run ./sample/manage.py runserver 0.0.0.0:8000
    # command: python3 manage.py runserver 0.0.0.0:8000
    # command: pysthon manage.py runserver 0.0.0.0:8000
    command: uwsgi --socket :8001 --module backend.wsgi --logto /tmp/uwsgi.log
    ports:
      # - '8000:8000'
      # - '8080:8080'
      - '8001:8001'
      expose:
        - "8001"
    # environment:
      # 01 add
      #   - DJANGO_SECRET_KEY=secret_key
      #   - DATABASE_URL=mysql://root:password@db:3306/sample
      # 12
      # DB_HOST: mysql
      # DB_HOST: db
      # DB_PORT: 3306

    volumes:
      # ソースコードが格納されている/codeを/srcにマウントすることでコンテナ外からソースファイルを触れるようにしておきます。
        # - ./backend:/app
      - ./backend:/code
      # - ./static:/static
      # 12
      # - sock:/var/run/uwsgi
      # - static:/var/www/app/sample/static
      # - ./log/python:/var/log/python
    depends_on:
      - db
    # networks:
    #   - sample
####################

####################
  # 03
  # nuxt:
      # container_name: nuxt
      # build:
      #   context: ./frontend
      # build: ./frontend
      # build: ./dockerfiles/nuxt_docker
      # tty: true

  ####################
      # ports:
          # - '3000:3000'
      # 01 add
      # expose:
      #   - "3000
      # volumes:
          # - ./frontend:/app
        # - ./frontend:/code
        # - ./frontend/:/usr/src/app


      # 01 add
      # depends_on:
      #   - django
  ####################
      # command: bash -c "yarn run dev"
      # 03
      # command: [sh, -c, "cd nuxt/ && npm run dev"]
  ####################

  ####################
  # 01
  server:
    container_name: nginx
    image: nginx:latest
    ports:
        # - "8000:8000"
        - "80:80"
        # - 8000:80
    volumes:
        # - ./config/nginx:/etc/nginx/conf.d
        # 11
        # - ./web/conf/default.conf:/etc/nginx/conf.d/default.conf
        # - ./web/src:/var/www/
        # 12
        # - sock:/var/run/uwsgi
        # - static:/var/www/app/sample/static
        # - ./log/nginx:/var/log/nginx
        # - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        # - ./nginx/conf.d:/etc/nginx/conf-sample.d
        # 15
        - ./nginx/conf:/etc/nginx/conf.d
        - ./nginx/uwsgi_params:/etc/nginx/uwsgi_params
        # - ./static:/static
        # - ./log/nginx:/var/log/nginx
    # app:
    #   image: php:7.4.0-fpm
    #   volumes:
    #     - ./php/src:/var/www/
    depends_on:
        - django
        # - nuxt
  ####################

# 永続化
# データを永続的に保持しておくためにはローカルのディレクトリと同期する方法とdata volumeコンテナに保存する２つの方法があります。
# "django.db.volume"というdata volumeを作成し同期させるようにしています。
volumes:
  d2.db.volume:
    name: d2.db.volume
# 04
# volumes:
#   mysite.db.volume:
#     name: mysite.db.volume

# 01
# volumes:
#   mysql_data:
#     driver: local

# 08
# volumes:
#   db-store:
# 09
# volumes:
#   db-data:
# 12
# volumes:
# data:
#   driver: local
# sock:
#   driver: local
# static:
#   driver: local
####################
# networks:
#   sample_network:
# networks:
#   mysite:
#     driver: bridge
# 09
# networks:
#   db_network:
#     driver: bridge
