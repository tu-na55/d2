version: '3'

services:
  backend:
    container_name: django
    build: ./backend
    command: python manage.py runserver 0.0.0.0:8001
    # command: ./wait-for-it.sh db:3306 -- pipenv run ./sample/manage.py runserver 0.0.0.0:8000
    # command: gunicorn config.wsgi:application --bind 0.0.0.0:8001
    # command: uwsgi --socket :8001 --module mysite.wsgi --logto /tmp/uwsgi.log
    # command: uwsgi --socket :8001 --module mysite.wsgi
    # command: batch
    # restart: always
    # tty: true
    ports:
      # - '8000:8000'
      - "8001:8001"
    # expose:
    #   - "8001"
    # environment:
      # 01 add
      #   - DJANGO_SECRET_KEY=secret_key
      #   - DATABASE_URL=mysql://root:password@db:3306/sample
      # 12
      # DB_HOST: mysql
      # DB_HOST: db
      # DB_PORT: 3306
    volumes:
      # ソースコードが格納されている/codeを/srcにマウントすることでコンテナ外からソースファイルを触れるようにしておきます。
      - ./backend:/app
      # - ./backend:/code
      # - ./static:/static
      # - static:/var/www/app/sample/static
      # - sock:/var/run/uwsgi
      - ./log/django:/var/log/python
      # - ./log/django:/home/work/django
      # - ./log/uwsgi:/home/work/uwsgi
    env_file:
      - ./backend/.env
    depends_on:
      - db
    # networks:
    #   - sample
    # 16
    # networks:
    #   django-sample-network:
    #     ipv4_address: 172.23.0.5
    ####################
  # test1-server:
  #   container_name: test1-container
  #   image: nginx:1.19
  #   volumes:
  #     - ./test1-server:/usr/share/nginx/html
  #   ports:
  #     - 7000:80
  ####################
  # test2-server:
  #   container_name: test2-container
  #   image: nginx:1.19
  #   volumes:
  #     - ./test2-server:/usr/share/nginx/html
  #   ports:
  #     - 7001:80
  ####################
  reverse-proxy:
    container_name: nginx
    image: nginx:1.19
    # build: ./nginx
    # restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ./nginx/nginx.conf:/etc/nginx/conf.d
      # - ./static:/static
      - static:/app/static
      # - ./backend/static:/var/www/app/static
      # - ./web/src:/var/www/
      - ./log/nginx:/var/log/nginx
    ports:
      - 80:80
      # - 1337:80
      # http://localhost:1337/admin
      # - 443:443
    depends_on:
        - backend
        # - frontend
  ####################
    # 17 add
    # environment:
      # DOMAINS: 'localhost'
      # STAGE: 'production'
      # TZ: Asia/Tokyo
  ####################
    # volumes:
        # 12
        # - sock:/var/run/uwsgi
        # 15
        # - ./nginx/uwsgi_params:/etc/nginx/uwsgi_params
        # 17
        # - ./nginx_uwsgi.ssl.conf.erb:/var/lib/nginx-conf/localhost.ssl.conf.erb:ro
        # - ssl_certs:/var/lib/https-portal
    # 16
    # networks:
    #   django-sample-network:
    #     ipv4_address: 172.23.0.4
  ####################
  db:
    container_name: mysql
    # image: mysql:8.0
    build: ./mysql
    # command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    # mysql:8.0
    # command: --default-authentication-plugin=mysql_native_password
    # restart: always
    # tty: true
    ports:
      - "13306:3306"
      # ホスト側のポートはローカルとバッティングするので5432以外にする
      # - 5433:5432
    # add
    # expose:
    #   - "3306"
    env_file: ./mysql/.env.db
    # environment:
      # MYSQL_ROOT_PASSWORD: rpass
      # MYSQL_USER: tusr
      # MYSQL_PASSWORD: tpass
      # MYSQL_DATABASE: sample
      # MYSQL_HOSTNAME: mysql
      # TZ: 'Asia/Tokyo'
    volumes:
      ##########
      # my.cnfの変更は down して up すれば反映されます。
      # ただ、デフォルト認証プラグインや既に作成したテーブルの文字コード変更などは手動で変更が必要なものもあります。
      # それは名前付きボリュームを削除して作り直した方が早いかもです。
      ##########
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      # *.sh / *.sql / *.sql.gzの拡張子のファイルはファイル名の昇順に実行される。
      - ./mysql/init:/docker-entrypoint-initdb.d
      # - ./sql:/docker-entrypoint-initdb.d
      # - ./db/mysql_conf:/etc/mysql/conf.d
      # - ./mysql/conf.d/custom.cnf:/etc/mysql/conf.d/custom.cnf
      # - ./config/nginx/my.cnf:/etc/mysql/conf.d/my.cnf
      # 永続化
      # - ./mysql/data:/var/lib/mysql
      - mysql_data:/var/lib/mysql
      # - d2.db.volume:/var/lib/mysql
      # - mysite.db.volume:/var/lib/mysql
      # - ./mysql/conf.d:/etc/mysql/conf.d
      # log
      - ./log/mysql:/var/log/mysql
      # networks:
      #   - sample_network
      # 09
      # networks:
      #     - db_network
      # 12
      # networks:
      #   - sample
  ####################
    # 08
    # db-testing:
    #     image: mysql:8.0
    #   volumes:
    #     - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    #   tmpfs:
    #     - /var/lib/mysql
    #     - /var/log/mysql
    #   environment:
    #     - MYSQL_DATABASE=${DB_NAME}
    #     - MYSQL_USER=${DB_USER}
    #     - MYSQL_PASSWORD=${DB_PASS}
    #     - MYSQL_ROOT_PASSWORD=${DB_PASS}
    #     - TZ=${TZ}
  ####################
    # postgres:
    #   image: postgres:12.1-alpine
    #   container_name: django_postgres
    #   restart: always
    #   environment:
    #     POSTGRES_DB: django
    #     POSTGRES_USER: django
    #     POSTGRES_PASSWORD: django
    #     TZ: Asia/Tokyo
    #   volumes:
    #     - pgdata:/var/lib/postgresql/data
  ####################
  # frontend:
  #   container_name: nuxt
  #   build: ./frontend
  #   command: npm run dev
  #   tty: true
  #   volumes:
  #     - ./frontend:/app
  #   ports:
  #     - "3000:3000"
      # - 8080:3000
  ####################
volumes:
  mysql_data:
    driver: local
  static:
    driver: local
  # ssl_certs:
    # driver: local
  #   sock:
  #     driver: local
####################
# networks:
#   sample_network:
# networks:
#   mysite:
#     driver: bridge
# 09
# networks:
#   db_network:
#     driver: bridge
# 16
# networks:
#   django-sample-network:
#     driver: bridge
#     ipam:
#      driver: default
#      config:
#        - subnet: 172.23.0.0/24

